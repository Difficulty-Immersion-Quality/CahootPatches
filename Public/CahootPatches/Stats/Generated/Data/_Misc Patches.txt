// ==================================== Free use coatings ====================================

new entry "OBJ_WyvernPoison"
type "Object"
using "OBJ_WyvernPoison"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_Wizardsbane"
type "Object"
using "ALCH_Solution_Oil_Wizardsbane"
data "UseCosts" ""

new entry "UNI_Poison_Brewer"
type "Object"
using "UNI_Poison_Brewer"
data "UseCosts" ""

new entry "Solution_Toxin_Basic"
type "Object"
using "Solution_Toxin_Basic"
data "UseCosts" ""

new entry "OBJ_SerpentVenom"
type "Object"
using "OBJ_SerpentVenom"
data "UseCosts" ""

new entry "OBJ_PurpleWormPoison"
type "Object"
using "OBJ_PurpleWormPoison"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_Frost"
type "Object"
using "ALCH_Solution_Oil_Frost"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_Reduce"
type "Object"
using "ALCH_Solution_Oil_Reduce"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_Combustion"
type "Object"
using "ALCH_Solution_Oil_Combustion"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_Bane"
type "Object"
using "ALCH_Solution_Oil_Bane"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_AttackBuff"
type "Object"
using "ALCH_Solution_Oil_AttackBuff"
data "UseCosts" ""

new entry "OBJ_Malice"
type "Object"
using "OBJ_Malice"
data "UseCosts" ""

new entry "OBJ_ParalysisPotion"
type "Object"
using "OBJ_ParalysisPotion"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_DamageAttackBuff"
type "Object"
using "ALCH_Solution_Oil_DamageAttackBuff"
data "UseCosts" ""

new entry "OBJ_DrowPoison"
type "Object"
using "OBJ_DrowPoison"
data "UseCosts" ""

new entry "OBJ_CrawlerMucus"
type "Object"
using "OBJ_CrawlerMucus"
data "UseCosts" ""

new entry "OBJ_BasicPoison"
type "Object"
using "OBJ_BasicPoison"
data "UseCosts" ""

new entry "ALCH_Solution_Oil_RemoveResistanceFire"
type "Object"
using "ALCH_Solution_Oil_RemoveResistanceFire"
data "UseCosts" ""

// ========================== Make throwing healing potions do nothing ==========================

new entry "Projectile_Potion_Destroy_Healing"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing"
data "SpellProperties" ""

new entry "Projectile_Potion_Destroy_Healing_Greater"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing_Greater"
data "SpellProperties" ""

new entry "Projectile_Potion_Destroy_Healing_Superior"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing_Superior"
data "SpellProperties" ""

new entry "Projectile_Potion_Destroy_Healing_Supreme"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing_Supreme"
data "SpellProperties" ""

// ========================== Weapon Actions ==========================
// Make weapon actions compatible with spells such as Shillelagh that change your melee weapon attack rolls/damage scale with your spellcasting modifier instead of Strength/Dexterity whenever the DealDamage function adds Strength/Dexterity modifier

// Maiming Strike
new entry "Target_CripplingStrike"
type "SpellData"
data "SpellType" "Target"
using "Target_CripplingStrike"
// data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CRIPPLED,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType); ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CRIPPLED,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Piercing);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), Piercing);ExecuteWeaponFunctors(MainHand)"

// Rush Attack
new entry "Rush_SpringAttack"
type "SpellData"
data "SpellType" "Rush"
using "Rush_SpringAttack"
// data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(OFF_BALANCED,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Piercing);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(OFF_BALANCED,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Piercing);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), Piercing);ExecuteWeaponFunctors(MainHand)"

// Disarming Strike
new entry "Target_DisarmingStrike"
type "SpellData"
data "SpellType" "Target"
using "Target_DisarmingAttack"
// data "SpellSuccess" "IF(not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(DISARM,100,0);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(DISARM,100,0);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"

// Heartstopper
new entry "Target_HeartStopper"
type "SpellData"
data "SpellType" "Target"
using "Target_HeartStopper"
// data "SpellSuccess" "IF(not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CHEST_TRAUMA,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType); ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CHEST_TRAUMA,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType); ExecuteWeaponFunctors(MainHand)"

// Backbreaker
new entry "Target_PostureBreaker"
type "SpellData"
data "SpellType" "Target"
using "Target_PostureBreaker"
// data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(PRONE,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(PRONE,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"

// Weakening Strike
new entry "Target_HinderingSmash"
type "SpellData"
data "SpellType" "Target"
using "Target_HinderingSmash"
// data "SpellSuccess" "IF(Character() and HasWeaponInMainHand() and not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(HINDERED,100,2);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') ):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);IF(Summon() or Tagged('UNDEAD') or HasStatus('SG_Polymorph') or Tagged('CONSTRUCT') or Tagged('CREATURE_SPORE_SERVANT') or IsImmuneToStatus('KNOCKED_OUT')):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and HasWeaponInMainHand() and not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(HINDERED,100,2);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);;IF(Summon() or Tagged('UNDEAD') or HasStatus('SG_Polymorph') or Tagged('CONSTRUCT') or Tagged('CREATURE_SPORE_SERVANT') or IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);;IF(Summon() or Tagged('UNDEAD') or HasStatus('SG_Polymorph') or Tagged('CONSTRUCT') or Tagged('CREATURE_SPORE_SERVANT') or IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"

// ========================== Crusader's Mantle ==========================
// Disable combat log

new entry "CRUSADERS_MANTLE"
type "StatusData"
data "StatusType" "BOOST"
using "CRUSADERS_MANTLE"
data "StatusPropertyFlags" "DisableCombatlog"

// ========================== Staff of Interruption: Counterspell ==========================
// Fix Counterspell from the weapon not actually rolling as a level 5 Counterspell

new entry "Interrupt_MAG_Counterspell"
type "InterruptData"
using "Interrupt_Counterspell"
data "Roll" "TryCounterspellHigherLevel(5)"

// ========================== BLINDED status ==========================
// Force the TickType to be EndTurn

new entry "BLINDED"
type "StatusData"
data "StatusType" "BOOST"
using "BLINDED"
// data "TickType" ""
data "TickType" "EndTurn"
