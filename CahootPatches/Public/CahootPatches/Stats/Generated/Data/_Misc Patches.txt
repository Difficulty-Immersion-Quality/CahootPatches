// ========================== Make throwing healing potions do nothing ==========================

new entry "Projectile_Potion_Destroy_Healing"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing"
data "SpellProperties" ""

new entry "Projectile_Potion_Destroy_Healing_Greater"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing_Greater"
data "SpellProperties" ""

new entry "Projectile_Potion_Destroy_Healing_Superior"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing_Superior"
data "SpellProperties" ""

new entry "Projectile_Potion_Destroy_Healing_Supreme"
type "SpellData"
data "SpellType" "Projectile"
using "Projectile_Potion_Destroy_Healing_Supreme"
data "SpellProperties" ""

// ========================== Weapon Actions ==========================
// Make weapon actions compatible with spells such as Shillelagh that change your melee weapon attack rolls/damage scale with your spellcasting modifier instead of Strength/Dexterity whenever the DealDamage function adds Strength/Dexterity modifier

// Maiming Strike
new entry "Target_CripplingStrike"
type "SpellData"
data "SpellType" "Target"
using "Target_CripplingStrike"
// data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CRIPPLED,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType); ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CRIPPLED,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Piercing);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), Piercing);ExecuteWeaponFunctors(MainHand)"

// Rush Attack
new entry "Rush_SpringAttack"
type "SpellData"
data "SpellType" "Rush"
using "Rush_SpringAttack"
// data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(OFF_BALANCED,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Piercing);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(OFF_BALANCED,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Piercing);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), Piercing);ExecuteWeaponFunctors(MainHand)"

// Disarming Strike
new entry "Target_DisarmingStrike"
type "SpellData"
data "SpellType" "Target"
using "Target_DisarmingAttack"
// data "SpellSuccess" "IF(not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(DISARM,100,0);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(DISARM,100,0);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"

// Heartstopper
new entry "Target_HeartStopper"
type "SpellData"
data "SpellType" "Target"
using "Target_HeartStopper"
// data "SpellSuccess" "IF(not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CHEST_TRAUMA,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType); ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(CHEST_TRAUMA,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType); ExecuteWeaponFunctors(MainHand)"

// Backbreaker
new entry "Target_PostureBreaker"
type "SpellData"
data "SpellType" "Target"
using "Target_PostureBreaker"
// data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(PRONE,100,2);DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and not SavingThrow(Ability.Strength, ManeuverSaveDC())):ApplyStatus(PRONE,100,2);IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"

// Weakening Strike
new entry "Target_HinderingSmash"
type "SpellData"
data "SpellType" "Target"
using "Target_HinderingSmash"
// data "SpellSuccess" "IF(Character() and HasWeaponInMainHand() and not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(HINDERED,100,2);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') ):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);IF(Summon() or Tagged('UNDEAD') or HasStatus('SG_Polymorph') or Tagged('CONSTRUCT') or Tagged('CREATURE_SPORE_SERVANT') or IsImmuneToStatus('KNOCKED_OUT')):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(Character() and HasWeaponInMainHand() and not SavingThrow(Ability.Strength, ManeuverSaveDC()+2)):ApplyStatus(HINDERED,100,2);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);;IF(Summon() or Tagged('UNDEAD') or HasStatus('SG_Polymorph') or Tagged('CONSTRUCT') or Tagged('CREATURE_SPORE_SERVANT') or IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType);IF(not Summon() and not Tagged('UNDEAD') and not HasStatus('SG_Polymorph') and not Tagged('CONSTRUCT') and not Tagged('CREATURE_SPORE_SERVANT') and not IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), MainMeleeWeaponDamageType, Nonmagical, Nonlethal);;IF(Summon() or Tagged('UNDEAD') or HasStatus('SG_Polymorph') or Tagged('CONSTRUCT') or Tagged('CREATURE_SPORE_SERVANT') or IsImmuneToStatus('KNOCKED_OUT') and HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE', 'SHILLELAGH', 'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON', 'FourEle_Attuned'}, {}, {}, GetAttackWeapon())):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), MainMeleeWeaponDamageType);ExecuteWeaponFunctors(MainHand)"

// ========================== Dawnburst Strike ==========================
// Change to single target and increase save DC for blindness (original AoE wasn't working hit allies and couldn't fix it myself so just changed the effect)

new entry "Target_MAG_WeaponAction_FlashingDawn"
type "SpellData"
data "SpellType" "Target"
using "Target_MAG_WeaponAction_FlashingDawn"
// data "AreaRadius" "3"
data "AreaRadius" ""
// data "SpellSuccess" "TARGET:DealDamage(MainMeleeWeapon, MainMeleeWeaponDamageType); TARGET:DealDamage(ProficiencyBonus, Radiant);AOE:IF(not SavingThrow(Ability.Constitution, ManeuverSaveDC()+2)):ApplyStatus(BLINDED, 100, 3);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "DealDamage(MainMeleeWeapon, MainMeleeWeaponDamageType);DealDamage(ProficiencyBonus, Radiant);IF(not SavingThrow(Ability.Constitution, ManeuverSaveDC()+4)):ApplyStatus(BLINDED, 100, 3);ExecuteWeaponFunctors(MainHand)"
// Deal additional Radiant damage equal to your &lt;LSTag Tooltip="ProficiencyBonus"&gt;Proficiency Bonus&lt;/LSTag&gt;. On a hit, light erupts on the target, forcing it to make a Constitution &lt;LSTag Tooltip="SavingThrow"&gt;Saving Throw&lt;/LSTag&gt; or be &lt;LSTag Type="Status" Tooltip="BLINDED"&gt;Blinded&lt;/LSTag&gt; for [1] turns.
data "Description" "h5a6970b0g1f2dg4060g9e88g4ecc1899c571;1"
// data "DescriptionParams" "Distance(3)"
data "DescriptionParams" "3"

// ========================== Staff of Interruption ==========================
// Fix Counterspell from the weapon not actually rolling as a level 5 Counterspell

new entry "Interrupt_MAG_Counterspell"
type "InterruptData"
using "Interrupt_Counterspell"
data "Roll" "TryCounterspellHigherLevel(5)"

// ========================== Crusader's Mantle ==========================
// Disable combat log

new entry "CRUSADERS_MANTLE"
type "StatusData"
data "StatusType" "BOOST"
using "CRUSADERS_MANTLE"
data "StatusPropertyFlags" "DisableCombatlog"

// ========================== Luminous Armour ==========================
// Change quality to Rare to reflect it being BiS endgame gear for some builds still

new entry "MAG_Radiant_RadiatingOrb_Armor"
type "Armor"
using "MAG_Radiant_RadiatingOrb_Armor"
// data "Rarity" "Uncommon"
data "Rarity" "Rare"

// ========================== Luminous Gloves ==========================
// Change quality to Rare to reflect it being BiS endgame gear for some builds still

new entry "MAG_Radiant_RadiatingOrb_Gloves"
type "Armor"
using "MAG_Radiant_RadiatingOrb_Gloves"
// data "Rarity" "Uncommon"
data "Rarity" "Rare"

// ========================== Gloves of Battlemage's Power ==========================
// // Make purple quality and change to Patch 8 version but with bugs fixed

// new entry "MAG_Gish_ArcaneAcuity_Gloves"
// type "Armor"
// using "MAG_Gish_ArcaneAcuity_Gloves"
// // data "Rarity" "Rare"
// data "Rarity" "VeryRare"
// data "PassivesOnEquip" "MAG_Gish_ArcaneAcuity_Gloves_Passive"

// new entry "MAG_Gish_ArcaneAcuity_Gloves_Passive"
// type "PassiveData"
// using "MAG_Gish_ArcaneAcuity_Gloves_Passive"
// // When you hit a target with a spell or &lt;LSTag Tooltip="Cantrip"&gt;cantrip&lt;/LSTag&gt; that uses a weapon, you gain &lt;LSTag Type="Status" Tooltip="MAG_GISH_ARCANE_ACUITY"&gt;Arcane Acuity&lt;/LSTag&gt; for [1] turns.
// data "Description" "h3e4efa11g8425g4497g9c84g9cdf091cb9ed;1"
// data "DescriptionParams" "2"
// data "Properties" "OncePerAttack"
// data "StatsFunctorContext" "OnDamage"
// // data "Conditions" "ArcaneAcuityGlovesCondition();"
// data "Conditions" "CHT_ArcaneAcuityGlovesCondition() and not HasStatus('SPIKE_GROWTH')"
// data "StatsFunctors" "ApplyStatus(SELF, MAG_GISH_ARCANE_ACUITY, 100, 2);ApplyStatus(SELF, MAG_GISH_ARCANE_ACUITY_DURATION_TECHNICAL, 100, 1)"

// Goon's fix for the original (pre-patch 8) version, plus also increasing the Arcane Acuity duration to 3 turns and item quality to Very Rare

// Vanilla entries
new entry "MAG_Gish_ArcaneAcuity_Gloves"
type "Armor"
using "_Hand_Magic_Metal"
data "RootTemplate" "15381544-e616-46e6-a881-0af793971863"
data "ValueUUID" "a229f048-70b0-4b0c-88cb-29b5c6bdb2d0"
// data "Rarity" "Rare"
data "Rarity" "VeryRare"
// data "PassivesOnEquip" "MAG_Gish_ArcaneAcuity_Gloves_Passive"
data "PassivesOnEquip" "MAG_Gish_ArcaneAcuity_Gloves_Passive;Goon_ArcaneAcuity_Gloves_Technical_Passive"
data "Unique" "1"

new entry "MAG_Gish_ArcaneAcuity_Gloves_Passive"
type "PassiveData"
data "DisplayName" "haab50542gb3f3g41c5g9ee9gefb50accc757;3"
// When a weapon &lt;LSTag Tooltip="AttackRoll"&gt;Attack Roll&lt;/LSTag&gt; inflicts a condition, the wielder gains &lt;LSTag Type="Status" Tooltip="MAG_GISH_ARCANE_ACUITY"&gt;Arcane Acuity&lt;/LSTag&gt; for [1] turns.
data "Description" "h892bd340gceb6g4493g8223g0ea12783f411;1"
data "DescriptionParams" "3"
data "Properties" "OncePerAttack"
// data "StatsFunctorContext" "OnStatusApply"
data "StatsFunctorContext" "OnStatusApplied"
data "Conditions" "HasStatus('GOON_ARCANEACUITY_GLOVES_ONATTACK_TECHNICAL') and HasStatus('GOON_ARCANEACUITY_GLOVES_ONSTATUS_TECHNICAL')"
// data "StatsFunctors" "IF(IsWeaponAttack()):ApplyStatus(SELF, MAG_GISH_ARCANE_ACUITY, 100, 2);IF(IsWeaponAttack()):ApplyStatus(SELF, MAG_GISH_ARCANE_ACUITY_DURATION_TECHNICAL, 100, 1)"
data "StatsFunctors" "ApplyStatus(SELF, MAG_GISH_ARCANE_ACUITY, 100, 3);ApplyStatus(SELF, MAG_GISH_ARCANE_ACUITY_DURATION_TECHNICAL, 100, 1);RemoveStatus(GOON_ARCANEACUITY_GLOVES_ONATTACK_TECHNICAL);RemoveStatus(GOON_ARCANEACUITY_GLOVES_ONSTATUS_TECHNICAL)"

// Custom entries
new entry "Goon_ArcaneAcuity_Gloves_Technical_Passive"
type "PassiveData"
data "Properties" "IsHidden;OncePerAttack"
data "StatsFunctors" "IF(context.HasContextFlag(StatsFunctorContext.OnAttack)):ApplyStatus(SELF,GOON_ARCANEACUITY_GLOVES_ONATTACK_TECHNICAL,100,1);IF(context.HasContextFlag(StatsFunctorContext.OnStatusApply)):ApplyStatus(SELF,GOON_ARCANEACUITY_GLOVES_ONSTATUS_TECHNICAL,100,1)"
data "StatsFunctorContext" "OnAttack;OnStatusApply"
data "Conditions" "(context.HasContextFlag(StatsFunctorContext.OnAttack) and IsWeaponAttack()) or (context.HasContextFlag(StatsFunctorContext.OnStatusApply) and not Self() and not StatusDoesNotInvokeOnStatusApply())"

new entry "GOON_ARCANEACUITY_GLOVES_ONATTACK_TECHNICAL"
type "StatusData"
data "StatusType" "BOOST"
data "DisplayName" "h523e0454g6b73gb985g37bbgdc61a1118438;1"
data "StackType" "Ignore"
data "TickType" "EndTurn"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator"

new entry "GOON_ARCANEACUITY_GLOVES_ONSTATUS_TECHNICAL"
type "StatusData"
data "StatusType" "BOOST"
data "DisplayName" "hd8cfd152g848cgfb39g8bd4gb36d2b6958c9;1"
data "StackType" "Ignore"
data "TickType" "EndTurn"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator"

// ========================== Boots of Stormy Clamour ==========================
// Change quality to Rare to reflect it being BiS endgame gear for some builds still

new entry "MAG_Thunder_ReverberationOnStatusApply_Boots"
type "Armor"
using "MAG_Thunder_ReverberationOnStatusApply_Boots"
// data "Rarity" "Uncommon"
data "Rarity" "Rare"

// ========================== Coruscation Ring ==========================
// Change quality to Rare to reflect it being BiS endgame gear for some builds still

new entry "MAG_Radiant_RadiatingOrb_Ring"
type "Armor"
using "MAG_Radiant_RadiatingOrb_Ring"
// data "Rarity" "Uncommon"
data "Rarity" "Rare"

// ========================== Callous Glow Ring ==========================
// Change quality to Very Rare to reflect it being BiS endgame gear for some builds still

new entry "MAG_Radiant_DamageBonusOnIlluminatedTarget_Ring"
type "Armor"
using "MAG_Radiant_DamageBonusOnIlluminatedTarget_Ring"
// data "Rarity" "Uncommon"
data "Rarity" "VeryRare"

// ========================== The Whispering Promise ==========================
// Change quality to Rare to reflect it being BiS endgame gear for some builds still

new entry "UNI_MassHealRing"
type "Armor"
using "UNI_MassHealRing"
// data "Rarity" "Uncommon"
data "Rarity" "Rare"
