// ===================================== Moonshae Folktales =====================================
// Rework to be closer to RAW: doesn't cost a Bardic Inspiration die to activate, but the actual effects require expending a Bardic Inspiration die
// Statuses for each individual variety are now actually removed upon choosing a different tale

new entry "Shout_MoonshaeFolktales"
type "SpellData"
data "SpellType" "Shout"
using "Shout_MoonshaeFolktales"
// data "Level" "0"
data "Level" ""
// data "Cooldown" "OncePerTurn"
data "Cooldown" ""
// data "UseCosts" "ActionPoint:1;BardicInspiration:1;"
data "UseCosts" "ActionPoint:1"
//data "SpellFlags" "IsSpell;HasSomaticComponent;IsLinkedSpellContainer"
data "SpellFlags" "HasSomaticComponent;IsLinkedSpellContainer"

// ===================================== Tale of Life =====================================
// Now requires expending a Bardic Inspiration die to increase the heal by the amount of the die (implemented as an interrupt). Not including the once per turn cooldown as this feature isn't that strong itself
// Also fix tooltip

new entry "Shout_TaleLife"
type "SpellData"
data "SpellType" "Shout"
using "Shout_TaleLife"
// data "Level" "0"
data "Level" ""
// data "Cooldown" "OncePerTurn"
data "Cooldown" ""
// You invoke a tale of vitality and thriving earth. When you restore &lt;LSTag Tooltip="HitPoints"&gt;hit points&lt;/LSTag&gt; to a creature with a spell, you can expend a &lt;LSTag Type="ActionResource" Tooltip="BardicInspiration"&gt;Bardic Inspiration&lt;/LSTag&gt; die to increase the amount of hit points restored by [1].
data "Description" "h1baf6296g9ab7g498dg8987g648be6df9198;1"
// data "DescriptionParams" "RegainHitPoints(BardicInspiration)"
data "DescriptionParams" "RegainHitPoints(LevelMapValue(BardicInspiration))"
// data "SpellProperties" "ApplyStatus(MOON_TALELIFE,100,-1)"
data "SpellProperties" "IF(not ClassLevelHigherOrEqualThan(5,'Bard')):ApplyStatus(CHT_MOON_TALELIFE_D6,100,-1);IF(ClassLevelHigherOrEqualThan(5,'Bard') and not ClassLevelHigherOrEqualThan(10,'Bard')):ApplyStatus(CHT_MOON_TALELIFE_D8,100,-1);IF(ClassLevelHigherOrEqualThan(10,'Bard') and not ClassLevelHigherOrEqualThan(15,'Bard')):ApplyStatus(CHT_MOON_TALELIFE_D10,100,-1);IF(ClassLevelHigherOrEqualThan(15,'Bard')):ApplyStatus(CHT_MOON_TALELIFE_D12,100,-1)"
// data "UseCosts" "ActionPoint:1;BardicInspiration:1;"
data "UseCosts" "ActionPoint:1"
// data "SpellFlags" "IsSpell;HasSomaticComponent"
data "SpellFlags" "HasSomaticComponent"

// ===================================== Custom entries for the main status and interrupt 

// Main status for the tale - having separate ones for each dice size of Bardic Inspiration
new entry "CHT_MOON_TALELIFE_D6"
type "StatusData"
data "StatusType" "BOOST"
data "Icon" "Moon_TaleLife"
// Tale of Life
data "DisplayName" "h612a9a67g4e62g4bd8g8e48g561d1ca7b52c;1"
data "Description" "h1baf6296g9ab7g498dg8987g648be6df9198;1"
data "DescriptionParams" "RegainHitPoints(LevelMapValue(BardicInspiration))"
data "Boosts" "UnlockInterrupt(CHT_Interrupt_TaleLife_d6)"
data "OnApplyFunctors" "IF(HasStatus('MOON_TALEGLOAM')):RemoveStatus(MOON_TALEGLOAM);IF(HasStatus('MOON_TALEMIRTH')):RemoveStatus(MOON_TALEMIRTH)"
data "StackId" "CHT_MOON_TALELIFE"
data "StackPriority" "6"
data "StatusGroups" "SG_RemoveOnRespec"

new entry "CHT_MOON_TALELIFE_D8"
type "StatusData"
data "StatusType" "BOOST"
using "CHT_MOON_TALELIFE_D6"
data "Boosts" "UnlockInterrupt(CHT_Interrupt_TaleLife_d8)"
data "StackPriority" "8"

new entry "CHT_MOON_TALELIFE_D10"
type "StatusData"
data "StatusType" "BOOST"
using "CHT_MOON_TALELIFE_D6"
data "Boosts" "UnlockInterrupt(CHT_Interrupt_TaleLife_d10)"
data "StackPriority" "10"

new entry "CHT_MOON_TALELIFE_D12"
type "StatusData"
data "StatusType" "BOOST"
using "CHT_MOON_TALELIFE_D6"
data "Boosts" "UnlockInterrupt(CHT_Interrupt_TaleLife_d12)"
data "StackPriority" "12"

// Interrupt
new entry "CHT_Interrupt_TaleLife_d6"
type "InterruptData"
data "DisplayName" "h85f54b42g4976g461cgb9e0g681ac841a32f;1"
data "Description" "heeb4f9ccg3b79g4642gb57fgc58cc63f01e5;1"
data "DescriptionParams" "RegainHitPoints(LevelMapValue(BardicInspiration))"
data "TooltipDamageList" "RegainHitPoints(LevelMapValue(BardicInspiration))"
data "Icon" "Moon_TaleLife"
data "InterruptContext" "OnSpellCast"
data "InterruptContextScope" "Nearby"
data "Container" "YesNoDecision"
data "Conditions" "IsAbleToReact(context.Observer) and Self(context.Source,context.Observer) and not AnyEntityIsItem() and (IsSpell() and HasFunctor(StatsFunctorType.RegainHitPoints))"
// data "Properties" "UseSpell(OBSERVER_SOURCE,CHT_Target_TaleLife,true,true,true,,true)"
data "Properties" "ApplyStatus(OBSERVER_SOURCE,CHT_MOON_TALELIFE_HEAL_D6,100,1)"
data "Cost" "BardicInspiration:1;"
// data "Stack" "TaleLife"
data "InterruptDefaultValue" "Ask;Enabled"

new entry "CHT_Interrupt_TaleLife_d8"
type "InterruptData"
using "CHT_Interrupt_TaleLife_d6"
data "Properties" "ApplyStatus(OBSERVER_SOURCE,CHT_MOON_TALELIFE_HEAL_D8,100,1)"

new entry "CHT_Interrupt_TaleLife_d10"
type "InterruptData"
using "CHT_Interrupt_TaleLife_d6"
data "Properties" "ApplyStatus(OBSERVER_SOURCE,CHT_MOON_TALELIFE_HEAL_D10,100,1)"

new entry "CHT_Interrupt_TaleLife_d12"
type "InterruptData"
using "CHT_Interrupt_TaleLife_d6"
data "Properties" "ApplyStatus(OBSERVER_SOURCE,CHT_MOON_TALELIFE_HEAL_D12,100,1)"

// new entry "CHT_Target_TaleLife"
// type "SpellData"
// data "SpellType" "Target"
// data "SpellProperties" "RegainHitPoints(1d6)"
// data "Icon" "Moon_TaleLife"
// data "DisplayName" "h1444e6e0gf500g4318g9255g611a22c2ccc3;1"
// data "Description" "hd05ed4cbg8967g4ba2g895agc294b5e683cf;1"
// data "CastSound" "Spell_Cast_Healing_HealingWord_L1to3"
// data "CastTextEvent" "Cast"
// data "SpellAnimation" "03496c4a-49e0-4132-b585-3e5ecd1ad8e5,,;,,;5e7e63e1-0e69-46e7-ade7-fe3dadcc9184,5e7e63e1-0e69-46e7-ade7-fe3dadcc9184,5e7e63e1-0e69-46e7-ade7-fe3dadcc9184;e9ad50df-e7f1-43a0-b782-4c08f92b0f5a,,;a9682ef9-5d9e-4ac0-8144-2c7fe6eb868c,,;,,;32fb4d91-7fde-4b05-9144-ea87b9a4284a,,;,,;,,"
// data "VerbalIntent" "Healing"
// data "SpellStyleGroup" "Class"
// data "SpellAnimationIntentType" "Peaceful"
// data "CastEffect" "7a73fa11-81e8-44bc-8653-a0d0ebbecf4b"
// data "TargetEffect" "70319a43-6342-4996-811d-dd50df8b3fa1"
// data "Sheathing" "DontChange"

/// Status applied to targets healed
new entry "CHT_MOON_TALELIFE_HEAL_D6"
type "StatusData"
data "StatusType" "BOOST"
data "DisplayName" "h6680e5cag23a6g438fg9a4dgebabd277f242;1"
data "Description" "hfcd5f5ddg1f7bg4f24g9c90gff1f404801da;1"
data "Passives" "CHT_TaleLife_Caster_d6;CHT_TaleLife_Technical_d6"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator"
data "TargetEffect" "70319a43-6342-4996-811d-dd50df8b3fa1"

new entry "CHT_MOON_TALELIFE_HEAL_D8"
type "StatusData"
data "StatusType" "BOOST"
using "CHT_MOON_TALELIFE_HEAL_D6"
data "Passives" "CHT_TaleLife_Caster_d8;CHT_TaleLife_Technical_d8"

new entry "CHT_MOON_TALELIFE_HEAL_D10"
type "StatusData"
data "StatusType" "BOOST"
using "CHT_MOON_TALELIFE_HEAL_D6"
data "Passives" "CHT_TaleLife_Caster_d10;CHT_TaleLife_Technical_d10"

new entry "CHT_MOON_TALELIFE_HEAL_D12"
type "StatusData"
data "StatusType" "BOOST"
using "CHT_MOON_TALELIFE_HEAL_D6"
data "Passives" "CHT_TaleLife_Caster_d12;CHT_TaleLife_Technical_d12"

// Passive: healing
new entry "CHT_TaleLife_Caster_d6"
type "PassiveData"
data "Properties" "IsHidden"
data "StatsFunctorContext" "OnHeal"
data "Conditions" "IsSpell() and HasFunctor(StatsFunctorType.RegainHitPoints)"
data "StatsFunctors" "RegainHitPoints(1d6)"

new entry "CHT_TaleLife_Caster_d8"
type "PassiveData"
using "CHT_TaleLife_Caster_d6"
data "StatsFunctors" "RegainHitPoints(1d8)"

new entry "CHT_TaleLife_Caster_d10"
type "PassiveData"
using "CHT_TaleLife_Caster_d6"
data "StatsFunctors" "RegainHitPoints(1d10)"

new entry "CHT_TaleLife_Caster_d12"
type "PassiveData"
using "CHT_TaleLife_Caster_d6"
data "StatsFunctors" "RegainHitPoints(1d12)"

// Passive: removes the status
new entry "CHT_TaleLife_Technical_d6"
type "PassiveData"
data "Properties" "IsHidden"
data "StatsFunctorContext" "OnCastResolved"
data "Conditions" "IsSpell() and HasFunctor(StatsFunctorType.RegainHitPoints)"
data "StatsFunctors" "RemoveStatus(CHT_MOON_TALELIFE_HEAL_D6)"

new entry "CHT_TaleLife_Technical_d8"
type "PassiveData"
using "CHT_TaleLife_Technical_d6"
data "StatsFunctors" "RemoveStatus(CHT_MOON_TALELIFE_HEAL_D8)"

new entry "CHT_TaleLife_Technical_d10"
type "PassiveData"
using "CHT_TaleLife_Technical_d6"
data "StatsFunctors" "RemoveStatus(CHT_MOON_TALELIFE_HEAL_D10)"

new entry "CHT_TaleLife_Technical_d12"
type "PassiveData"
using "CHT_TaleLife_Technical_d6"
data "StatsFunctors" "RemoveStatus(CHT_MOON_TALELIFE_HEAL_D12)"

// ===================================== Tale of Gloam =====================================
// Now allows to use the Disengae or Hide action for free (as per RAW), instead of just automatically giving you the SNEAK status after giving someone else Bardic Inspiration

new entry "Shout_TaleGloam"
type "SpellData"
data "SpellType" "Shout"
using "Shout_TaleGloam"
// data "Level" "0"
data "Level" ""
// data "Cooldown" "OncePerTurn"
data "Cooldown" ""
// You invoke a tale of mystery and secrets. When you give a creature a &lt;LSTag Type="Status" Tooltip="BARDIC_INSPIRATION"&gt;Bardic Inspiration&lt;/LSTag&gt; die, you can take the &lt;LSTag Type="Spell" Tooltip="Shout_Disengage"&gt;Disengage&lt;/LSTag&gt; or &lt;LSTag Type="Spell" Tooltip="Shout_Hide"&gt;Hide&lt;/LSTag&gt; action for free.
data "Description" "h1a1f17a9g9de0g4026gaa38g377037a2cffa;1"
// data "UseCosts" "ActionPoint:1;BardicInspiration:1;"
data "UseCosts" "ActionPoint:1"
// data "SpellFlags" "IsSpell;HasSomaticComponent"
data "SpellFlags" "IsSpell"

new entry "MOON_TALEGLOAM"
type "StatusData"
data "StatusType" "BOOST"
using "MOON_TALEGLOAM"
data "Description" "h1a1f17a9g9de0g4026gaa38g377037a2cffa;1"
// data "OnApplyFunctors" ""
data "OnApplyFunctors" "IF(HasStatus('CHT_MOON_TALELIFE_D6')):RemoveStatus(CHT_MOON_TALELIFE_D6);IF(HasStatus('CHT_MOON_TALELIFE_D8')):RemoveStatus(CHT_MOON_TALELIFE_D6);IF(HasStatus('CHT_MOON_TALELIFE_D10')):RemoveStatus(CHT_MOON_TALELIFE_D10);IF(HasStatus('CHT_MOON_TALELIFE_D12')):RemoveStatus(CHT_MOON_TALELIFE_D12);IF(HasStatus('MOON_TALEMIRTH')):RemoveStatus(MOON_TALEMIRTH)"

new entry "TaleGloam_Passive"
type "PassiveData"
using "TaleGloam_Passive"
// data "StatsFunctors" "ApplyStatus(SNEAKING,100,-1)"
data "StatsFunctors" "ApplyStatus(CHT_TALEGLOAM,100,1)"

new entry "CHT_TALEGLOAM"
type "StatusData"
data "StatusType" "BOOST"
// Tale of Gloam: Disengage or Hide
data "DisplayName" "h92ade126g6d35g4c64gb5d1gc3f8284cdbf7;1"
// You can take the &lt;LSTag Type="Spell" Tooltip="Shout_Disengage"&gt;Disengage&lt;/LSTag&gt; or &lt;LSTag Type="Spell" Tooltip="Shout_Hide"&gt;Hide&lt;/LSTag&gt; action for free.
data "Description" "h4959b942g8d01g4db9gae59g70ede43940d4;1"
data "Icon" "Moon_TaleGloam"
data "StackId" "CHT_TALEGLOAM"
data "TickType" "EndTurn"
data "Boosts" "UnlockSpellVariant(SpellId('Shout_Disengage'),ModifyUseCosts(Replace,ActionPoint,0,-1,ActionPoint),ModifyIconGlow(),ModifyTooltipDescription());UnlockSpellVariant(SpellId('Shout_Hide'),ModifyUseCosts(Replace,ActionPoint,0,-1,ActionPoint),ModifyIconGlow(),ModifyTooltipDescription())"
data "RemoveConditions" "SpellId('Shout_Disengage') or SpellId('Shout_Hide')"
data "RemoveEvents" "OnAttack;OnSpellCast"
data "StatusPropertyFlags" "DisableCombatlog;DisablePortraitIndicator"

// ===================================== Tale of Mirth =====================================
// Reworked to be a spell that causes an enemy to take a penalty to their next Saving Throw (basically College of Eloquence's level 3 Unsettling Words feature)
// This feature RAW was already pretty OP, and the original mod's implementation even more broken OP

new entry "Shout_TaleMirth"
type "SpellData"
data "SpellType" "Shout"
using "Shout_TaleMirth"
// data "Level" "0"
data "Level" ""
// data "Cooldown" "OncePerTurn"
data "Cooldown" ""
// You invoke a tale of merriment and fey guile. You can cast &lt;LSTag Type="Spell" Tooltip="CHT_Target_TaleMirth"&gt;Tale of Mirth: Mocking Words&lt;/LSTag&gt;.
data "Description" "hb49d617egbe40g4900ga73bg0c0a281266b0;1"
// data "UseCosts" "ActionPoint:1;BardicInspiration:1;"
data "UseCosts" "ActionPoint:1"
// data "SpellFlags" "IsSpell;HasSomaticComponent"
data "SpellFlags" "IsSpell"

new entry "MOON_TALEMIRTH"
type "StatusData"
data "StatusType" "BOOST"
using "MOON_TALEMIRTH"
data "Description" "hb49d617egbe40g4900ga73bg0c0a281266b0;1"
// data "Boosts" "IF(IsSpell()):UnlockSpellVariant(ModifySavingThrowDisadvantage());"
data "Boosts" "UnlockSpell(CHT_Target_TaleMirth)"
// data "OnApplyFunctors" ""
data "OnApplyFunctors" "IF(HasStatus('CHT_MOON_TALELIFE_D6')):RemoveStatus(CHT_MOON_TALELIFE_D6);IF(HasStatus('CHT_MOON_TALELIFE_D8')):RemoveStatus(CHT_MOON_TALELIFE_D6);IF(HasStatus('CHT_MOON_TALELIFE_D10')):RemoveStatus(CHT_MOON_TALELIFE_D10);IF(HasStatus('CHT_MOON_TALELIFE_D12')):RemoveStatus(CHT_MOON_TALELIFE_D12);IF(HasStatus('MOON_TALEGLOAM')):RemoveStatus(MOON_TALEGLOAM)"

new entry "CHT_Target_TaleMirth"
type "SpellData"
data "SpellType" "Target"
data "SpellProperties" "IF(not ClassLevelHigherOrEqualThan(5,'Bard')):ApplyStatus(CHT_TALEMIRTH_ROLL_REFERENCE,100,1d6);IF(ClassLevelHigherOrEqualThan(5,'Bard') and not ClassLevelHigherOrEqualThan(10,'Bard')):ApplyStatus(CHT_TALEMIRTH_ROLL_REFERENCE,100,1d8);IF(ClassLevelHigherOrEqualThan(10,'Bard') and not ClassLevelHigherOrEqualThan(15,'Bard')):ApplyStatus(CHT_TALEMIRTH_ROLL_REFERENCE,100,1d10);IF(ClassLevelHigherOrEqualThan(15,'Bard')):ApplyStatus(CHT_TALEMIRTH_ROLL_REFERENCE,100,1d12);ApplyStatus(CHT_TALEMIRTH,100,2);"
data "TargetRadius" "18"
data "TargetConditions" "Character()"
data "Icon" "Moon_TaleMirth"
// Tale of Mirth: Mocking Words
data "DisplayName" "he196a8feg7489g4413g878cgad8e7a969872;1"
// Choose one creature you can see. The creature must subtract an amount equal to a roll of your &lt;LSTag Type="ActionResource" Tooltip="BardicInspiration"&gt;Bardic Inspiration&lt;/LSTag&gt; dice from the next &lt;LSTag Tooltip="SavingThrow"&gt;Saving Throw&lt;/LSTag&gt; it makes before the start of your next turn.
data "Description" "h310dfd0dgf6cbg49f5g9c10g97f08613fde0;1"
data "DescriptionParams" "LevelMapValue(BardicInspiration)"
data "CastSound" "Spell_Cast_Damage_Psychic_DissonantWhispers_L1to3"
data "TargetSound" "Spell_Impact_Damage_Psychic_DissonantWhispers_L1to3"
data "PreviewCursor" "Cast"
data "CastTextEvent" "Cast"
data "CycleConditions" "Enemy() and not Dead()"
data "UseCosts" "BonusActionPoint:1;BardicInspiration:1"
data "SpellAnimation" "3ff87abf-1ea1-4c32-aadf-c822d74c7dc0,,;,,;af94aac1-d8eb-4ccb-9520-694ade11b61c,,;f5db4001-b136-4c48-9aa4-026c4a7dd3b7,,;d8925ce4-d6d9-400c-92f5-ad772ef7f178,,;,,;eadedcce-d01b-4fbb-a1ae-d218f13aa5d6,,;,,;,,"
data "VerbalIntent" "Debuff"
data "SpellStyleGroup" "Class"
data "SpellFlags" "HasVerbalComponent;IsHarmful;Temporary"
data "HitAnimationType" "MagicalDamage_Psychic"
data "PrepareEffect" "752219e2-351d-46ea-9448-3a714b3d3acc"
data "CastEffect" "bd2fc245-5645-452f-a2cd-d158b751bbe4"
data "TargetEffect" "a0aee53a-d702-4901-9bb3-7cf08e214346"
data "Sheathing" "Sheathed"

new entry "CHT_TALEMIRTH_ROLL_REFERENCE"
type "StatusData"
data "StatusType" "BOOST"
// Tale of Mirth: Mocking Words
data "DisplayName" "h636593b4g3894g4fb9g81f1gf316dafa5fe7;1"
// Affected entity has a penalty equal to the duration indicated to the next &lt;LSTag Tooltip="SavingThrow"&gt;Saving Throw&lt;/LSTag&gt; it makes before the start of your next turn.
data "Description" "h779c5aebgd744g4de9g8796gdb492d2e5dc8;1"
data "Icon" "Moon_TaleMirth"
data "StackId" "CHT_TALEMIRTH_ROLL_REFERENCE"
data "StatusGroups" "SG_RemoveOnRespec"
data "StatusPropertyFlags" "FreezeDuration"

new entry "CHT_TALEMIRTH"
type "StatusData"
data "StatusType" "BOOST"
data "StillAnimationType" "Weakened"
data "StillAnimationPriority" "Weakened"
data "SoundVocalStart" "WEAK"
data "StackId" "CHT_TALEMIRTH"
data "Boosts" "UnlockInterrupt(CHT_Interrupt_TaleMirth)"
data "StatusEffect" "a15aaf6c-5fcd-4602-a7b5-343c98d49591"
data "ManagedStatusEffectType" "Negative"
data "ManagedStatusEffectGroup" "6435c10a-c67d-4f79-8813-b84b0762f92b"
data "StatusGroups" "SG_RemoveOnRespec"
data "TickType" "StartTurn"
data "TickFunctors" "RemoveStatus(CHT_TALEMIRTH)"
data "OnRemoveFunctors" "RemoveStatus(CHT_TALEMIRTH_ROLL_REFERENCE)"
data "StatusPropertyFlags" "InitiateCombat;BringIntoCombat;TickingWithSource;DisableOverhead;DisableCombatlog;DisablePortraitIndicator"

new entry "CHT_Interrupt_TaleMirth"
type "InterruptData"
data "DisplayName" "h636593b4g3894g4fb9g81f1gf316dafa5fe7;1"
data "Icon" "Moon_TaleMirth"
data "InterruptContext" "OnPostRoll"
data "InterruptContextScope" "Self"
data "Container" "YesNoDecision"
data "Conditions" "Self(context.Target,context.Observer) and IsSavingThrow()"
data "Properties" "AdjustRoll(-(Target.CHT_TALEMIRTH_ROLL_REFERENCE.Duration));RemoveStatus(OBSERVER_OBSERVER,CHT_TALEMIRTH);RemoveStatus(OBSERVER_OBSERVER,CHT_TALEMIRTH_ROLL_REFERENCE);ApplyStatus(OBSERVER_OBSERVER,INTERRUPT_CUTTING_WORDS_TARGET,100,0)"
data "Stack" "CHT_TaleMirth"
data "InterruptDefaultValue" "Enabled"

// ===================================== Moonbeam: Blessing of the Moonwells =====================================
// No longer shares RootSpellID with Moonbeam
// The recast is now a separate spell using the main spell's features, rather than just the vanilla level 3 Moonbeam recast
// The heal for allies is decreased to 1d6 to make up for the change from RAW where it harms allies, but causing any creature to fail the saving throw lets you heal any ally for 2d4

// Main spell
new entry "Target_Moonbeam_Moonwell"
type "SpellData"
data "SpellType" "Target"
using "Target_Moonbeam_Moonwell"
// data "ConcentrationSpellID" "Target_Moonbeam_Move_3"
data "ConcentrationSpellID" "CHT_Moonbeam_Moonwell_Move"
// data "SpellProperties" "GROUND:ApplyStatus(SELF,MOONBEAM_OWNER_3,100,10);GROUND:Summon(09e375ca-21cb-4c29-9c0a-2346f00fb2f2, 10,,,'MoonbeamStack',MOONWELL_MOONBEAM_AURA);AI_ONLY:GROUND:CreateExplosion(Projectile_AiHelper_MoonBeam);"
data "SpellProperties" "GROUND:ApplyStatus(SELF,CHT_MOONWELL_MOONBEAM_OWNER,100,10);GROUND:Summon(09e375ca-21cb-4c29-9c0a-2346f00fb2f2, 10,,,'MoonbeamStack',CHT_MOONWELL_MOONBEAM_AURA);AI_ONLY:GROUND:CreateExplosion(Projectile_AiHelper_MoonBeam);"
// data "RootSpellID" "Target_Moonbeam"
data "RootSpellID" ""
// Call down a beam of light that damages any enemy or heals any ally that enters the beam or starts its turn in the light. You can use an action to move the beam [1].
data "Description" "h06ac9548g00f0g4fd4g881ag48f969cfec9a;1"

// Status granting the recast spell
new entry "CHT_MOONWELL_MOONBEAM_OWNER"
type "StatusData"
data "StatusType" "BOOST"
data "StackId" "CHT_MOONWELL_MOONBEAM_OWNER"
data "Boosts" "UnlockSpell(CHT_Moonbeam_Moonwell_Move)"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator"
data "OnRemoveFunctors" "BreakConcentration()"

// Recast spell
new entry "CHT_Moonbeam_Moonwell_Move"
type "SpellData"
data "SpellType" "Target"
using "Target_Moonbeam_Move"
data "ConcentrationSpellID" ""
// data "Level" "3"
data "Level" "3"
// Move Blessing of the Moonwells: Moonbeam
data "DisplayName" "h0ac2e4b1g9fa8g4704g9d83ga8dd7cd25e42;1"
// Move the beam of moonlight up to [1]. The beam of light damages any enemy and heals any ally that enters the beam or starts its turn in the light.
data "Description" "h53866138g0fffg43c7g9175g2b5b22eb5f4e;1"
// data "SpellProperties" "GROUND:Summon(09e375ca-21cb-4c29-9c0a-2346f00fb2f2, 10,,true,'MoonbeamStack',MOONBEAM_AURA)"
data "SpellProperties" "GROUND:Summon(09e375ca-21cb-4c29-9c0a-2346f00fb2f2, 10,,true,'MoonbeamStack',CHT_MOONWELL_MOONBEAM_AURA)"
//data "TooltipDamageList" "DealDamage(2d10,Radiant)"
data "TooltipDamageList" "DealDamage(3d10,Radiant);RegainHitPoints(1d6)"
// data "TooltipUpcastDescription" "66388a6f-44dd-4c9f-a9e7-910c50e70755"
data "TooltipUpcastDescription" ""
data "PowerLevel" "3"

// Aura applying the damage status, as well as healing allies
new entry "CHT_MOONWELL_MOONBEAM_AURA"
type "StatusData"
data "StatusType" "BOOST"
using "MOONBEAM_AURA_3"
// Blessing of the Moonwells: Moonbeam
data "DisplayName" "h5b03bb0fga085g4bfcg84a0g783214c9eac1;1"
// Ghostly flames engulf any creature that enters this silvery light or starts its turn inside the light, dealing [1] to enemies and healing allies for [2]. On a successful save, enemies still take half damage.
data "Description" "h475fcb37gae10g421fg96c6gcb1b193a61ac;1"
// data "DescriptionParams" "DealDamage(3d10,Radiant)"
data "DescriptionParams" "DealDamage(3d10,Radiant);RegainHitPoints(1d6)"
// data "AuraStatuses" "TARGET:IF(Character() and not Dead()):ApplyStatus(MOONBEAM_3,100,-1)"
data "AuraStatuses" "TARGET:IF(Character() and not Dead() and not Ally() and not HasStatus('KNOCKED_OUT')):ApplyStatus(MOONBEAM_3,100,-1);TARGET:IF(Character() and not Dead() and Ally()):ApplyStatus(CHT_MOONWELL_MOONBEAM_HEAL,100,-1)"

new entry "CHT_MOONWELL_MOONBEAM_HEAL"
type "StatusData"
data "StatusType" "BOOST"
data "DisplayName" "h5b03bb0fga085g4bfcg84a0g783214c9eac1;1"
// Creature is engulfed by ghostly flames that heal for [1] per turn.
data "Description" "hfa4973c9g8411g4606g85ccg6490052ece8f;1"
data "DescriptionParams" "RegainHitPoints(1d6)"
data "Icon" "Spell_Evocation_Moonbeam"
data "SoundStart" "Spell_Status_MoonBeam_Enter"
data "SoundLoop" "Spell_Status_MoonBeam_MO"
data "SoundStop" "Spell_Status_MoonBeam_MO_Stop"
data "StackId" "CHT_MOONWELL_MOONBEAM_HEAL"
data "TickType" "StartTurn"
data "OnApplyFunctors" "RegainHitPoints(1d6)"
data "TickFunctors" "RegainHitPoints(1d6)"
data "ApplyEffect" "bd3c1d13-92f4-40dc-91a0-a8450ec2be75"
